/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import type {PersonProps} from "../person/PersonProps";

/**
 * Link to the appearance
 */
export type LinkToAppearance = string;
/**
 * Title that should be shown for this appearance
 */
export type TitleForTheAppearance = string;
/**
 * Description of the type and content of the appearance
 */
export type DescriptionOfTheAppearance = string;
/**
 * Short text to tease the appearance
 */
export type TextExcerptToTeaseAppearance = string;
/**
 * Name of the host
 */
export type Name = string;
/**
 * URL to get to the web presence of the host
 */
export type Link = string;
/**
 * Who participated in this appearance?
 *
 * @minItems 1
 */
export type Participants = [PersonProps, ...PersonProps[]];
/**
 * Text to display inside tag label
 */
export type Label = string;
/**
 * Set optional href to link the tag
 */
export type LinkTarget = string;
/**
 * Tags for this appearance entry
 */
export type Tags = TagLabel[];
/**
 * Date the appearance occurred
 */
export type Date = string;
/**
 * Primary language the appearance was in
 */
export type Language = "English" | "German";
/**
 * Url to main image for this appearance entry
 */
export type Url = string;
/**
 * Title of the appearance cover
 */
export type Caption = string;
/**
 * Select a media asset for this appearance entry
 */
export type UrlForTheMediaAsset = string;
/**
 * Title of the appearance image
 */
export type CaptionForTheImage = string;
/**
 * Media assets to display for this appearance entry
 */
export type Media = MediaAsset[];
/**
 * Title of the related appearance
 */
export type Title = string;
/**
 * Excerpt for the related appearance
 */
export type Excerpt = string;
/**
 * Url for the related appearance
 */
export type Url1 = string;
/**
 * Type of content that is being teased
 */
export type Type = string;
/**
 * Image for the related appearance
 */
export type Image = string;
/**
 * Text to display inside tag label
 */
export type Label1 = string;
/**
 * Set optional href to link the tag
 */
export type LinkTarget1 = string;
/**
 * Tags for this related teaser
 */
export type Tags1 = TagLabel1[];
/**
 * Entries related to this appearance entry
 */
export type RelatedEntries = Related[];
/**
 * Overview page for all appearance entries
 */
export type OverviewPage = string;

/**
 * Display one appearance entry with all its details
 */
export interface AppearanceProps {
  link: LinkToAppearance;
  title: TitleForTheAppearance;
  description: DescriptionOfTheAppearance;
  excerpt?: TextExcerptToTeaseAppearance;
  host: HostOfTheAppearance;
  participants: Participants;
  tags?: Tags;
  date: Date;
  language?: Language;
  cover: CoverImage;
  media?: Media;
  related?: RelatedEntries;
  overviewPage: OverviewPage;
  [k: string]: unknown;
}
/**
 * The party hosting the appearance, may be a podcast, company or individual
 */
export interface HostOfTheAppearance {
  name?: Name;
  url?: Link;
  [k: string]: unknown;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel {
  label?: Label;
  link?: LinkTarget;
  [k: string]: unknown;
}
/**
 * Add main image to represent this appearance entry
 */
export interface CoverImage {
  src: Url;
  caption: Caption;
  [k: string]: unknown;
}
/**
 * Single media asset
 */
export interface MediaAsset {
  src?: UrlForTheMediaAsset;
  caption?: CaptionForTheImage;
  [k: string]: unknown;
}
/**
 * A preview of contextually relevant content
 */
export interface Related {
  title: Title;
  excerpt: Excerpt;
  url: Url1;
  typeLabel?: Type;
  image: Image;
  tags?: Tags1;
  [k: string]: unknown;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel1 {
  label?: Label1;
  link?: LinkTarget1;
  [k: string]: unknown;
}
