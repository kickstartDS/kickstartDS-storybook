/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */

/**
 * Picture source
 */
export type Source = string;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset = string;
/**
 * Alt text to display for picture
 */
export type AltText = string;
/**
 * Width of the picture
 */
export type Width = number;
/**
 * Height of the picture
 */
export type Height = number;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses = string;
/**
 * Add id attribute to the image
 */
export type Id = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute = string;
/**
 * Render noscript fallback
 */
export type Noscript = boolean;
/**
 * Load the picture lazily
 */
export type Lazy = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset1 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources = {
  srcSet?: PictureSourceset1;
  media?: TODOMEDIATITLE;
  type?: TODOTYPETITLE;
  [k: string]: unknown;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute = string;
/**
 * Name, company name, etc.
 */
export type Title = string;
/**
 * Position, profession, department, location, etc.
 */
export type Subtitle = string;
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab = boolean;
export type CopyText = string;
/**
 * Additional css classes attached to the wrapping element
 */
export type Class = string;
/**
 * Text content for the headline
 */
export type Text = string;
/**
 * Text content for the headline
 */
export type Text1 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export type Level = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Open link in new Tab
 */
export type OpenLinkInNewTab1 = boolean;
/**
 * Additional css classes attached to the wrapping element
 */
export type Class1 = string;
/**
 * Picture source
 */
export type Source1 = string;
/**
 * Width of the picture
 */
export type Width1 = number;
/**
 * Height of the picture
 */
export type Height1 = number;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset2 = string;
/**
 * Alt text to display for picture
 */
export type AltText1 = string;
/**
 * Add additional css classes that should be applied to the button
 */
export type AdditionalClasses1 = string;
/**
 * Add id attribute to the image
 */
export type Id1 = string;
/**
 * Define an itemprop attribute for the picture
 */
export type ItempropAttribute1 = string;
/**
 * Define a style attribute for the picture
 */
export type StyleAttribute1 = string;
/**
 * Render noscript fallback
 */
export type Noscript1 = boolean;
/**
 * Load the picture lazily
 */
export type Lazy1 = boolean;
/**
 * Use a srcSet to display picture
 */
export type PictureSourceset3 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export type TODOMEDIATITLE1 = string;
/**
 * TODO TYPE DESCRIPTION
 */
export type TODOTYPETITLE1 = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export type Sources1 = {
  srcSet?: PictureSourceset3;
  media?: TODOMEDIATITLE1;
  type?: TODOTYPETITLE1;
  [k: string]: unknown;
}[];
/**
 * Set additional class(es) to the picture
 */
export type ClassAttribute1 = string;
/**
 * Choose an horizontal alignment for the image.
 */
export type Alignment = "left" | "center" | "right";
/**
 * Date for news item
 */
export type Date = string;
/**
 * Choose an alignment for the headline
 */
export type Alignment1 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export type Text2 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export type Level1 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export type Style = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Text content for the optional subheadline
 */
export type Subheadline = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export type BottomSpacing = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export type PageHeader = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export type AdditionalClasses2 = string;
/**
 * Text to display inside tag label
 */
export type Label = string;
/**
 * Choose a size to scale the tag label up or down
 */
export type Size = "s" | "m" | "l";
/**
 * Set optional href to link the tag
 */
export type LinkTarget = string;
/**
 * Choose whether the element is removable or not
 */
export type Removable = boolean;
/**
 * Add additional css classes that should be applied to the label
 */
export type AdditionalClasses3 = string;
export type Categories = TagLabel[];
/**
 * Additional css classes attached to the wrapping element
 */
export type Class2 = string;
/**
 * Text content for the headline
 */
export type Text3 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export type Level2 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
export type ShareLinks = ShareLink1[];

export interface PostProps {
  aside?: PostAside;
  head?: PostHead;
  shareBar?: {
    headline?: Text3;
    headlineLevel?: Level2;
    links?: ShareLinks;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Post Aside
 */
export interface PostAside {
  author?: Author;
  meta?: Meta;
  shareBar?: ShareBar;
  className?: Class1;
  [k: string]: unknown;
}
/**
 * Component to show contact information
 */
export interface Author {
  image?: Picture;
  title?: Title;
  subtitle?: Subtitle;
  links?: {
    icon?: string;
    label?: string;
    href?: string;
    newTab?: OpenLinkInNewTab;
    [k: string]: unknown;
  }[];
  copy?: CopyText;
  className?: Class;
  headline?: Text;
  [k: string]: unknown;
}
/**
 * Base component to display a picture
 */
export interface Picture {
  src?: Source;
  srcSet?: PictureSourceset;
  alt?: AltText;
  width?: Width;
  height?: Height;
  className?: AdditionalClasses;
  id?: Id;
  itemProp?: ItempropAttribute;
  style?: StyleAttribute;
  noscript?: Noscript;
  lazy?: Lazy;
  sources?: Sources;
  pictureClassName?: ClassAttribute;
  [k: string]: unknown;
}
export interface Meta {
  items?: MetaItem[];
  [k: string]: unknown;
}
export interface MetaItem {
  icon?: string;
  text?: string;
  [k: string]: unknown;
}
export interface ShareBar {
  headline?: Text1;
  headlineLevel?: Level;
  links?: ShareLink[];
  [k: string]: unknown;
}
export interface ShareLink {
  href?: string;
  icon?: string;
  title?: string;
  newTab?: OpenLinkInNewTab1;
  [k: string]: unknown;
}
/**
 * Post Head
 */
export interface PostHead {
  image?: Picture1;
  imageAlignment?: Alignment;
  date?: Date;
  headline?: Headline;
  categories?: Categories;
  className?: Class2;
  [k: string]: unknown;
}
/**
 * Base component to display a picture
 */
export interface Picture1 {
  src?: Source1;
  width?: Width1;
  height?: Height1;
  srcSet?: PictureSourceset2;
  alt?: AltText1;
  className?: AdditionalClasses1;
  id?: Id1;
  itemProp?: ItempropAttribute1;
  style?: StyleAttribute1;
  noscript?: Noscript1;
  lazy?: Lazy1;
  sources?: Sources1;
  pictureClassName?: ClassAttribute1;
  [k: string]: unknown;
}
/**
 * Headline
 */
export interface Headline {
  align: Alignment1;
  content?: Text2;
  level: Level1;
  styleAs?: Style;
  subheadline?: Subheadline;
  spaceAfter: BottomSpacing;
  pageHeader?: PageHeader;
  className?: AdditionalClasses2;
  [k: string]: unknown;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel {
  label: Label;
  size: Size;
  link?: LinkTarget;
  removable?: Removable;
  className?: AdditionalClasses3;
}
export interface ShareLink1 {
  href?: string;
  icon?: string;
  newTab?: boolean;
  [k: string]: unknown;
}
