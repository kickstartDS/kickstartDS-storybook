declare module "@kickstartds/content/lib/visual/typing" {
  /* eslint-disable */
  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run `yarn run schema` to regenerate this file.
   */

  import type { HeadlineProps } from "@kickstartds/headline.schema.json/lib/headline/typing";
  import type { ButtonProps } from "@kickstartds/button.schema.json/lib/button/typing";

  export type Height = "small" | "default" | "fullImage" | "fullScreen";
  /**
   * Choose a media type between image, video and none
   */
  export type MediaType = "image" | "video" | "none";
  /**
   * Background image source for small screens
   */
  export type MobileImageSource = string;
  /**
   * Background image source for medium screens
   */
  export type TabletImageSource = string;
  /**
   * Background image source for large screens
   */
  export type DesktopImageSource = string;
  /**
   * Override for img tag of picture element, if needed
   */
  export type OptionalSource = string;
  /**
   * Choose to indent the image horizontally on small screens
   */
  export type ImageIndent = "none" | "left" | "right";
  /**
   * Alt text to display for picture
   */
  export type AltText = string;
  /**
   * Background video source for small screens
   */
  export type MobileVideoSource = string;
  /**
   * Background video source for medium screens
   */
  export type TabletVideoSource = string;
  /**
   * Background video source for large screens
   */
  export type DesktopVideoSource = string;
  /**
   * Enable grid layer
   */
  export type GridLayer = boolean;
  /**
   * Toggles visibility of the box
   */
  export type DisplayBox = boolean;
  /**
   * Text box copy text
   */
  export type Text = string;
  /**
   * Text box link configuration
   */
  export type Link = {
    enabled?: DisplayLink;
    variant?: string;
    [k: string]: unknown;
  } & ButtonProps;
  /**
   * Toggles visibility of the link
   */
  export type DisplayLink = boolean;
  /**
   * The text box is aligned inside the content grid
   */
  export type Indent = boolean;
  /**
   * Horizontal orientation of the box inside the keyvisual
   */
  export type HorizontalOrientation = "left" | "center" | "right";
  /**
   * Vertical orientation of the box inside the keyvisual
   */
  export type VerticalOrientation = "top" | "center" | "bottom";
  /**
   * Choose a style for the box
   */
  export type StyleOfTheBox = "solid" | "transparent";
  export type Inverted = boolean;
  /**
   * Custom css background color
   */
  export type CustomBackgroundColor = string;
  /**
   * The text box is in front of the image on small screens
   */
  export type Inbox = boolean;
  /**
   * Show skip button
   */
  export type SkipButton = boolean;
  export type AdditionalClasses = string;
  /**
   * Optional custom component identifier
   */
  export type KsComponentAttribute = string;

  /**
   * visual
   */
  export interface VisualProps {
    height?: Height;
    media?: MediaWrapper;
    overlay?: GridLayer;
    box?: TextBox;
    backgroundColor?: CustomBackgroundColor;
    inbox?: Inbox;
    skipButton?: SkipButton;
    className?: AdditionalClasses;
    component?: KsComponentAttribute;
  }
  /**
   * Wrapper for all media types
   */
  export interface MediaWrapper {
    mode?: MediaType;
    image?: BackgroundImage;
    video?: BackgroundVideo;
  }
  /**
   * Sources of background images for different screen sizes
   */
  export interface BackgroundImage {
    srcMobile: MobileImageSource;
    srcTablet?: TabletImageSource;
    srcDesktop?: DesktopImageSource;
    src?: OptionalSource;
    indent?: ImageIndent;
    alt?: AltText;
  }
  /**
   * Sources of background videos for different screen sizes
   */
  export interface BackgroundVideo {
    srcMobile: MobileVideoSource;
    srcTablet?: TabletVideoSource;
    srcDesktop?: DesktopVideoSource;
  }
  /**
   * Content and style configuration for the text box
   */
  export interface TextBox {
    enabled?: DisplayBox;
    headline?: Headline & HeadlineProps;
    text?: Text;
    link?: Link;
    indent?: Indent;
    horizontal?: HorizontalOrientation;
    vertical?: VerticalOrientation;
    background?: StyleOfTheBox;
    inverted?: Inverted;
  }
  /**
   * Headline for the box
   */
  export interface Headline {
    level?: string;
    styleAs?: string;
    content?: string;
    [k: string]: unknown;
  }
}
