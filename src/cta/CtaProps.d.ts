/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */
/**
 * Choose an alignment for the headline
 */
export declare type Alignment = "left" | "center" | "right";
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Text content for the headline
 */
export declare type Text = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses = string;
/**
 * Switch to displaying the image after the text on desktop
 */
export declare type DesktopImageAfterText = boolean;
/**
 * Switch to displaying the image after the text on mobile
 */
export declare type MobileImageAfterText = boolean;
/**
 * Image source to use
 */
export declare type ImageSource = string;
/**
 * Select an aspect ratio to use for cropping and displaying the image
 */
export declare type ImageAspectRatio = "4:3" | "3:2" | "16:9" | "1:1" | "none";
/**
 * Select a vertical alignment for the image
 */
export declare type ImageVerticalAlignment = "center" | "top" | "top-edge" | "bottom" | "bottom-edge";
/**
 * Select a horizontal alignment for the image
 */
export declare type ImageHorizontalAlignment = "center" | "left" | "left-edge" | "right" | "right-edge";
/**
 * Background image for the whole element
 */
export declare type BackgroundImage = string;
/**
 * Background color for the whole element
 */
export declare type BackgroundColor = string;
/**
 * Display a full sized version of the image
 */
export declare type FullSizeImage = boolean;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level1 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style1 = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment1 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text1 = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline1 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing1 = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader1 = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses1 = string;
/**
 * Text content to display inside the element
 */
export declare type Text2 = string;
/**
 * Switch text alignment between left and center
 */
export declare type TextAlignment = "left" | "center";
/**
 * Overwrite the color to use for the text content
 */
export declare type TextColor = string;
/**
 * Select a vertical alignment for the box
 */
export declare type BoxVerticalAlignment = "center" | "top" | "bottom";
/**
 * Select a horizontal alignment for the box
 */
export declare type BoxHorizontalAlignment = "center" | "left" | "right";
/**
 * Text used on button
 */
export declare type Label = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses2 = string;
export declare type IconIdentifier = string;
export declare type AriaRole = string;
export declare type AdditionalClass = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab = boolean;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class = string;
/**
 * Text used on button
 */
export declare type Label1 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle1 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize1 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses3 = string;
export declare type IconIdentifier1 = string;
export declare type AriaRole1 = string;
export declare type AdditionalClass1 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton1 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton1 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute1 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation1 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation1 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref1 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab1 = boolean;
export interface CtaProps {
    headline: Headline;
    storytelling: Storytelling;
    button: LinkButton1;
    [k: string]: unknown;
}
/**
 * Headline
 */
export interface Headline {
    align: Alignment;
    level: Level;
    styleAs?: Style;
    content?: Text;
    subheadline?: Subheadline;
    spaceAfter: BottomSpacing;
    pageHeader?: PageHeader;
    className?: AdditionalClasses;
    [k: string]: unknown;
}
/**
 * Component to present rich combinations of text and media, best used sequentially
 */
export interface Storytelling {
    image: Image;
    backgroundImage?: BackgroundImage;
    backgroundColor?: BackgroundColor;
    full?: FullSizeImage;
    box: TextBox;
    className?: Class;
    [k: string]: unknown;
}
/**
 * Image displayed alongside the text content
 */
export interface Image {
    order?: Order;
    source?: ImageSource;
    ratio?: ImageAspectRatio;
    vAlign?: ImageVerticalAlignment;
    hAlign?: ImageHorizontalAlignment;
    [k: string]: unknown;
}
/**
 * Choose what comes first on mobile and desktop: image or text
 */
export interface Order {
    desktopImageLast?: DesktopImageAfterText;
    mobileImageLast?: MobileImageAfterText;
    [k: string]: unknown;
}
/**
 * Text content to display
 */
export interface TextBox {
    headline?: Headline1;
    text?: Text2;
    textAlign?: TextAlignment;
    textColor?: TextColor;
    vAlign?: BoxVerticalAlignment;
    hAlign?: BoxHorizontalAlignment;
    link?: LinkButton;
    [k: string]: unknown;
}
/**
 * Headline for the box
 */
export interface Headline1 {
    level: Level1;
    styleAs?: Style1;
    align: Alignment1;
    content?: Text1;
    subheadline?: Subheadline1;
    spaceAfter: BottomSpacing1;
    pageHeader?: PageHeader1;
    className?: AdditionalClasses1;
    [k: string]: unknown;
}
/**
 * link-button
 */
export interface LinkButton {
    label: Label;
    variant: ButtonStyle;
    size: ButtonSize;
    className?: AdditionalClasses2;
    icon?: Icon;
    iconBefore?: IconBeforeButton;
    iconAfter?: IconAfterButton;
    dataComponent?: DataComponentAttribute;
    fillAnimation?: FillAnimation;
    iconAnimation?: IconAnimation;
    href: ButtonHref;
    newTab?: OpenLinkInNewTab;
}
/**
 * Icon
 */
export interface Icon {
    icon?: IconIdentifier;
    role?: AriaRole;
    className?: AdditionalClass;
    [k: string]: unknown;
}
/**
 * link-button
 */
export interface LinkButton1 {
    label: Label1;
    variant: ButtonStyle1;
    size: ButtonSize1;
    className?: AdditionalClasses3;
    icon?: Icon1;
    iconBefore?: IconBeforeButton1;
    iconAfter?: IconAfterButton1;
    dataComponent?: DataComponentAttribute1;
    fillAnimation?: FillAnimation1;
    iconAnimation?: IconAnimation1;
    href: ButtonHref1;
    newTab?: OpenLinkInNewTab1;
}
/**
 * Icon
 */
export interface Icon1 {
    icon?: IconIdentifier1;
    role?: AriaRole1;
    className?: AdditionalClass1;
    [k: string]: unknown;
}
