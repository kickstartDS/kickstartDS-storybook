/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run `yarn run schema` to regenerate this file.
 */
/**
 * Select an image to display inside the quote, to the left
 */
export declare type ImageSource = string;
/**
 * Copy text for the element
 */
export declare type TextContent = string;
/**
 * Optionally display the source for the quote
 */
export declare type Source = string;
/**
 * Optionally display a byline for the quote's source
 */
export declare type SourceAddition = string;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class = string;
/**
 * Additional css classes attached to the slider
 */
export declare type Class1 = string;
/**
 * Text used on button
 */
export declare type Label = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses = string;
export declare type IconIdentifier = string;
export declare type AriaRole = string;
export declare type AdditionalClass = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab = boolean;
/**
 * Input id
 */
export declare type ID = string;
/**
 * Name
 */
export declare type Name = string;
/**
 * Toggle is checked
 */
export declare type Checked = boolean;
/**
 * Toggle is disabled
 */
export declare type Disabled = boolean;
/**
 * Text used on button
 */
export declare type Label1 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle1 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize1 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses1 = string;
export declare type IconIdentifier1 = string;
export declare type AriaRole1 = string;
export declare type AdditionalClass1 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton1 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton1 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute1 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation1 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation1 = boolean;
/**
 * Select the type attribute for the button
 */
export declare type TypeAttribute = "button" | "submit" | "reset";
/**
 * Define a value attribute for the button
 */
export declare type ValueAttribute = string;
/**
 * Define a name attribute for the button
 */
export declare type NameAttribute = string;
/**
 * Set the disabled attribute for the button
 */
export declare type DisabledAttribute = boolean;
/**
 * Text to display inside tag label
 */
export declare type Label2 = string;
/**
 * Choose a size to scale the tag label up or down
 */
export declare type Size = "s" | "m" | "l";
/**
 * Set optional href to link the tag
 */
export declare type LinkTarget = string;
/**
 * Choose whether the element is removable or not
 */
export declare type Removable = boolean;
/**
 * Add additional css classes that should be applied to the label
 */
export declare type AdditionalClasses2 = string;
export declare type Height = "small" | "default" | "fullImage" | "fullScreen";
/**
 * Choose a media type between image, video and none
 */
export declare type MediaType = "image" | "video" | "none";
/**
 * Background image source for small screens
 */
export declare type MobileImageSource = string;
/**
 * Background image source for medium screens
 */
export declare type TabletImageSource = string;
/**
 * Background image source for large screens
 */
export declare type DesktopImageSource = string;
/**
 * Override for img tag of picture element, if needed
 */
export declare type OptionalSource = string;
/**
 * Choose to indent the image horizontally on small screens
 */
export declare type ImageIndent = "none" | "left" | "right";
/**
 * Alt text to display for picture
 */
export declare type AltText = string;
/**
 * Background video source for small screens
 */
export declare type MobileVideoSource = string;
/**
 * Background video source for medium screens
 */
export declare type TabletVideoSource = string;
/**
 * Background video source for large screens
 */
export declare type DesktopVideoSource = string;
/**
 * Enable grid layer
 */
export declare type GridLayer = boolean;
/**
 * Toggles visibility of the box
 */
export declare type DisplayBox = boolean;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses3 = string;
/**
 * Text box copy text
 */
export declare type Text1 = string;
/**
 * Toggles visibility of the link
 */
export declare type DisplayLink = boolean;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle2 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Text used on button
 */
export declare type Label3 = string;
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize2 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses4 = string;
export declare type IconIdentifier2 = string;
export declare type AriaRole2 = string;
export declare type AdditionalClass2 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton2 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton2 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute2 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation2 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation2 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref1 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab1 = boolean;
/**
 * The text box is aligned inside the content grid
 */
export declare type Indent = boolean;
/**
 * Horizontal orientation of the box inside the keyvisual
 */
export declare type HorizontalOrientation = "left" | "center" | "right";
/**
 * Vertical orientation of the box inside the keyvisual
 */
export declare type VerticalOrientation = "top" | "center" | "bottom";
/**
 * Choose a style for the box
 */
export declare type StyleOfTheBox = "default" | "light" | "transparent";
/**
 * Custom css background color
 */
export declare type CustomBackgroundColor = string;
/**
 * The text box is in front of the image on small screens
 */
export declare type Inbox = boolean;
/**
 * Show skip button
 */
export declare type SkipButton = boolean;
export declare type AdditionalClasses5 = string;
/**
 * Select an image to display inside the quote, to the left
 */
export declare type ImageSource1 = string;
/**
 * Copy text for the element
 */
export declare type TextContent1 = string;
/**
 * Optionally display the source for the quote
 */
export declare type Source1 = string;
/**
 * Optionally display a byline for the quote's source
 */
export declare type SourceAddition1 = string;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class2 = string;
/**
 * Automatically move to next slide after 4 seconds without user interaction
 */
export declare type AutoPlay = boolean;
export declare type Height1 = "small" | "default" | "fullImage" | "fullScreen";
/**
 * Choose a media type between image, video and none
 */
export declare type MediaType1 = "image" | "video" | "none";
/**
 * Background image source for small screens
 */
export declare type MobileImageSource1 = string;
/**
 * Background image source for medium screens
 */
export declare type TabletImageSource1 = string;
/**
 * Background image source for large screens
 */
export declare type DesktopImageSource1 = string;
/**
 * Override for img tag of picture element, if needed
 */
export declare type OptionalSource1 = string;
/**
 * Choose to indent the image horizontally on small screens
 */
export declare type ImageIndent1 = "none" | "left" | "right";
/**
 * Alt text to display for picture
 */
export declare type AltText1 = string;
/**
 * Background video source for small screens
 */
export declare type MobileVideoSource1 = string;
/**
 * Background video source for medium screens
 */
export declare type TabletVideoSource1 = string;
/**
 * Background video source for large screens
 */
export declare type DesktopVideoSource1 = string;
/**
 * Enable grid layer
 */
export declare type GridLayer1 = boolean;
/**
 * Toggles visibility of the box
 */
export declare type DisplayBox1 = boolean;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level1 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style1 = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment1 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text2 = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline1 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing1 = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader1 = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses6 = string;
/**
 * Text box copy text
 */
export declare type Text3 = string;
/**
 * Toggles visibility of the link
 */
export declare type DisplayLink1 = boolean;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle3 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Text used on button
 */
export declare type Label4 = string;
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize3 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses7 = string;
export declare type IconIdentifier3 = string;
export declare type AriaRole3 = string;
export declare type AdditionalClass3 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton3 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton3 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute3 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation3 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation3 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref2 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab2 = boolean;
/**
 * The text box is aligned inside the content grid
 */
export declare type Indent1 = boolean;
/**
 * Horizontal orientation of the box inside the keyvisual
 */
export declare type HorizontalOrientation1 = "left" | "center" | "right";
/**
 * Vertical orientation of the box inside the keyvisual
 */
export declare type VerticalOrientation1 = "top" | "center" | "bottom";
/**
 * Choose a style for the box
 */
export declare type StyleOfTheBox1 = "default" | "light" | "transparent";
/**
 * Custom css background color
 */
export declare type CustomBackgroundColor1 = string;
/**
 * The text box is in front of the image on small screens
 */
export declare type Inbox1 = boolean;
/**
 * Show skip button
 */
export declare type SkipButton1 = boolean;
export declare type AdditionalClasses8 = string;
/**
 * preview label
 */
export declare type SlidePreviewLabel = string;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class3 = string;
/**
 * Picture source
 */
export declare type Source2 = string;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset = string;
/**
 * Alt text to display for picture
 */
export declare type AltText2 = string;
/**
 * Width of the picture
 */
export declare type Width = number;
/**
 * Height of the picture
 */
export declare type Height2 = number;
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses9 = string;
/**
 * Add id attribute to the image
 */
export declare type Id = string;
/**
 * Define an itemprop attribute for the picture
 */
export declare type ItempropAttribute = string;
/**
 * Define a style attribute for the picture
 */
export declare type StyleAttribute = string;
/**
 * Select a value for the picture object fit
 */
export declare type ObjectFit = "contain" | "cover" | "fill" | "none" | "scale-down";
/**
 * Render noscript fallback
 */
export declare type Noscript = boolean;
/**
 * Load the picture lazily
 */
export declare type Lazy = boolean;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset1 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export declare type TODOMEDIATITLE = string;
/**
 * TODO TYPE DESCRIPTION
 */
export declare type TODOTYPETITLE = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export declare type Sources = {
    srcSet?: PictureSourceset1;
    media?: TODOMEDIATITLE;
    type?: TODOTYPETITLE;
    [k: string]: unknown;
}[];
/**
 * Set additional class(es) to the picture
 */
export declare type ClassAttribute = string;
/**
 * Name, company name, etc.
 */
export declare type Title = string;
/**
 * Position, profession, department, location, etc.
 */
export declare type Subtitle = string;
export declare type PhoneNumber = string;
export declare type EmailAddress = string;
export declare type CopyText = string;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class4 = string;
/**
 * Background image for the whole element
 */
export declare type BackgroundImage2 = string;
/**
 * Background color for the whole element
 */
export declare type BackgroundColor = string;
/**
 * Display a full sized version of the image
 */
export declare type FullSizeImage = boolean;
/**
 * Image source to use
 */
export declare type ImageSource2 = string;
/**
 * Select an aspect ratio to use for cropping and displaying the image
 */
export declare type ImageAspectRatio = "4:3" | "3:2" | "16:9" | "1:1" | "none";
/**
 * Select a vertical alignment for the image
 */
export declare type ImageVerticalAlignment = "center" | "top" | "top-edge" | "bottom" | "bottom-edge";
/**
 * Select a horizontal alignment for the image
 */
export declare type ImageHorizontalAlignment = "center" | "left" | "left-edge" | "right" | "right-edge";
/**
 * Switch to displaying the image after the text on mobile
 */
export declare type MobileImageAfterText = boolean;
/**
 * Switch to displaying the image after the text on desktop
 */
export declare type DesktopImageAfterText = boolean;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level2 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style2 = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment2 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text4 = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline2 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing2 = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader2 = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses10 = string;
/**
 * Text content to display inside the element
 */
export declare type Text5 = string;
/**
 * Switch text alignment between left and center
 */
export declare type TextAlignment = "left" | "center";
/**
 * Overwrite the color to use for the text content
 */
export declare type TextColor = string;
/**
 * Select a vertical alignment for the box
 */
export declare type BoxVerticalAlignment = "center" | "top" | "bottom";
/**
 * Select a horizontal alignment for the box
 */
export declare type BoxHorizontalAlignment = "center" | "left" | "right";
/**
 * Text used on button
 */
export declare type Label5 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle4 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize4 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses11 = string;
export declare type IconIdentifier4 = string;
export declare type AriaRole4 = string;
export declare type AdditionalClass4 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton4 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton4 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute4 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation4 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation4 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref3 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab3 = boolean;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class5 = string;
/**
 * Include the text for the collapsible that should be visible before opening
 */
export declare type SummaryTextForTheCollapsible = string;
/**
 * Include the text for the collapsible that should be visible after opening
 */
export declare type ContentOfTheCollapsible = string;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class6 = string;
/**
 * Final number to count to
 */
export declare type Number = number;
export declare type IconIdentifier5 = string;
export declare type AriaRole5 = string;
export declare type AdditionalClass5 = string;
/**
 * Topic for the count-up box. Displayed before the text, in bold
 */
export declare type Topic = string;
/**
 * Copy text for the element
 */
export declare type TextContent2 = string;
/**
 * Toggles visibility of the link
 */
export declare type DisplayLink2 = boolean;
/**
 * Text used on button
 */
export declare type Label6 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle5 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize5 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses12 = string;
export declare type IconIdentifier6 = string;
export declare type AriaRole6 = string;
export declare type AdditionalClass6 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton5 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton5 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute5 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation5 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation5 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref4 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab4 = boolean;
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class7 = string;
/**
 * Choose one of the set ratios, all ratios except `none` stretch the image to 100% width
 */
export declare type ImageRatio = "none" | "4:3" | "16:9" | "1:1";
/**
 * Choose an alignment for the box. For the image it only applies for a `ratio` value of `none`
 */
export declare type Alignment3 = "left" | "center" | "right";
/**
 * Select an image to display inside the content box, at the top
 */
export declare type ImageSource3 = string;
/**
 * Topic for the content box. Displayed before the text, in bold
 */
export declare type Topic1 = string;
/**
 * Text for the content box
 */
export declare type TextContent3 = string;
/**
 * Toggles visibility of the link
 */
export declare type DisplayLink3 = boolean;
/**
 * Text used on button
 */
export declare type Label7 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle6 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize6 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses13 = string;
export declare type IconIdentifier7 = string;
export declare type AriaRole7 = string;
export declare type AdditionalClass7 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton6 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton6 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute6 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation6 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation6 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref5 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab5 = boolean;
/**
 * Add additional css classes that should be applied to the content box
 */
export declare type AdditionalClasses14 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level3 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style3 = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment4 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text6 = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline3 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing3 = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader3 = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses15 = string;
/**
 * Copy text for the element
 */
export declare type TextContent4 = string;
/**
 * In relation to the text content
 */
export declare type MediaAlignment = "above-left" | "above-center" | "above-right" | "beside-left" | "beside-right" | "intext-left" | "intext-right" | "below-left" | "below-center" | "below-right";
/**
 * Url (mp4) for the video to display
 */
export declare type Source3 = string;
/**
 * Use an iframe embed
 */
export declare type EmbeddedIframe = boolean;
/**
 * Title to use for the video
 */
export declare type VideoTitle = string;
/**
 * Width of the video
 */
export declare type Width1 = number;
/**
 * Height of the video
 */
export declare type Height3 = number;
/**
 * Display media item over full width
 */
export declare type FullWidthMedia = boolean;
/**
 * Caption
 */
export declare type Caption = string;
/**
 * Picture source
 */
export declare type Source4 = string;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset2 = string;
/**
 * Alt text to display for picture
 */
export declare type AltText3 = string;
/**
 * Width of the picture
 */
export declare type Width2 = number;
/**
 * Height of the picture
 */
export declare type Height4 = number;
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses16 = string;
/**
 * Add id attribute to the image
 */
export declare type Id1 = string;
/**
 * Define an itemprop attribute for the picture
 */
export declare type ItempropAttribute1 = string;
/**
 * Define a style attribute for the picture
 */
export declare type StyleAttribute1 = string;
/**
 * Select a value for the picture object fit
 */
export declare type ObjectFit1 = "contain" | "cover" | "fill" | "none" | "scale-down";
/**
 * Render noscript fallback
 */
export declare type Noscript1 = boolean;
/**
 * Load the picture lazily
 */
export declare type Lazy1 = boolean;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset3 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export declare type TODOMEDIATITLE1 = string;
/**
 * TODO TYPE DESCRIPTION
 */
export declare type TODOTYPETITLE1 = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export declare type Sources1 = {
    srcSet?: PictureSourceset3;
    media?: TODOMEDIATITLE1;
    type?: TODOTYPETITLE1;
    [k: string]: unknown;
}[];
/**
 * Set additional class(es) to the picture
 */
export declare type ClassAttribute1 = string;
/**
 * Display media item over full width
 */
export declare type FullWidthMedia1 = boolean;
/**
 * Caption
 */
export declare type Caption1 = string;
/**
 * Thumbnail Source
 */
export declare type ThumbnailSource = string;
/**
 * Lightbox Image Source
 */
export declare type LightboxImageSource = string;
/**
 * Width
 */
export declare type Width3 = number;
/**
 * height
 */
export declare type Height5 = number;
/**
 * Hover Zoom Icon
 */
export declare type HoverZoomIcon = boolean;
/**
 * Caption
 */
export declare type Caption2 = string;
/**
 * Hide caption visually
 */
export declare type HideCaptionVisually = boolean;
/**
 * Gallery identifier
 */
export declare type GalleryIdentifier = string;
/**
 * ID
 */
export declare type ID1 = string;
/**
 * Additional Class
 */
export declare type AdditionalClass8 = string;
/**
 * Additional Caption Class
 */
export declare type AdditionalCaptionClass = string;
/**
 * Display media item over full width
 */
export declare type FullWidthMedia2 = boolean;
/**
 * Caption
 */
export declare type Caption3 = string;
/**
 * Collection of media items to display
 */
export declare type Media = (TextMediaVideo | TextMediaImage | TextMediaLazyImage)[];
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class8 = string;
/**
 * Topic for the teaser box. Displayed before the text, in bold
 */
export declare type Topic2 = string;
/**
 * Text for the teaser box
 */
export declare type TextContent5 = string;
/**
 * Optionally use this to apply a dark variant to the box
 */
export declare type DarkVariant = boolean;
/**
 * Text used on button
 */
export declare type Label8 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle7 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize7 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses17 = string;
export declare type IconIdentifier8 = string;
export declare type AriaRole8 = string;
export declare type AdditionalClass9 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton7 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton7 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute7 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation7 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation7 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref6 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab6 = boolean;
/**
 * Hides the link. The box as a whole keeps being clickable
 */
export declare type HideLink = boolean;
/**
 * Additional css classes attached to the box
 */
export declare type Class9 = string;
/**
 * Select an image to display inside the teaser box, at the top
 */
export declare type ImageSource4 = string;
/**
 * Choose the ratio used to crop and display the image
 */
export declare type ImageRatio1 = "4:3" | "16:9" | "1:1";
/**
 * Optionally add inner spacing to the displayed image
 */
export declare type ImageSpacing = boolean;
/**
 * Picture source
 */
export declare type Source5 = string;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset4 = string;
/**
 * Alt text to display for picture
 */
export declare type AltText4 = string;
/**
 * Width of the picture
 */
export declare type Width4 = number;
/**
 * Height of the picture
 */
export declare type Height6 = number;
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses18 = string;
/**
 * Add id attribute to the image
 */
export declare type Id2 = string;
/**
 * Define an itemprop attribute for the picture
 */
export declare type ItempropAttribute2 = string;
/**
 * Define a style attribute for the picture
 */
export declare type StyleAttribute2 = string;
/**
 * Select a value for the picture object fit
 */
export declare type ObjectFit2 = "contain" | "cover" | "fill" | "none" | "scale-down";
/**
 * Render noscript fallback
 */
export declare type Noscript2 = boolean;
/**
 * Load the picture lazily
 */
export declare type Lazy2 = boolean;
/**
 * Use a srcSet to display picture
 */
export declare type PictureSourceset5 = string;
/**
 * TODO MEDIA DESCRIPTION
 */
export declare type TODOMEDIATITLE2 = string;
/**
 * TODO TYPE DESCRIPTION
 */
export declare type TODOTYPETITLE2 = string;
/**
 * Additional sources. This will result in a `picture`-Element
 */
export declare type Sources2 = {
    srcSet?: PictureSourceset5;
    media?: TODOMEDIATITLE2;
    type?: TODOTYPETITLE2;
    [k: string]: unknown;
}[];
/**
 * Set additional class(es) to the picture
 */
export declare type ClassAttribute2 = string;
export declare type Logos = Picture2[];
/**
 * Additional css classes attached to the wrapping element
 */
export declare type Class10 = string;
/**
 * Topic for the teaser box. Displayed before the text, in bold
 */
export declare type Topic3 = string;
/**
 * Text for the teaser box
 */
export declare type TextContent6 = string;
/**
 * Optionally use this to apply a dark variant to the box
 */
export declare type DarkVariant1 = boolean;
/**
 * Text used on button
 */
export declare type Label9 = string;
/**
 * Choose one of the styles from the list
 */
export declare type ButtonStyle8 = "solid" | "solid-inverted" | "clear" | "clear-inverted" | "outline" | "outline-inverted";
/**
 * Choose a size between small, medium and large
 */
export declare type ButtonSize8 = "small" | "medium" | "large";
/**
 * Add additional css classes that should be applied to the button
 */
export declare type AdditionalClasses19 = string;
export declare type IconIdentifier9 = string;
export declare type AriaRole9 = string;
export declare type AdditionalClass10 = string;
/**
 * Display icon before the button text
 */
export declare type IconBeforeButton8 = boolean;
/**
 * Display icon after the button text
 */
export declare type IconAfterButton8 = boolean;
/**
 * Overwrite the data-component to use for rendering
 */
export declare type DataComponentAttribute8 = string;
/**
 * Add fill animation on hover
 */
export declare type FillAnimation8 = boolean;
/**
 * Add icon animation on hover
 */
export declare type IconAnimation8 = boolean;
/**
 * Link used for button
 */
export declare type ButtonHref7 = string;
/**
 * Open link in new Tab
 */
export declare type OpenLinkInNewTab7 = boolean;
/**
 * Hides the link. The box as a whole keeps being clickable
 */
export declare type HideLink1 = boolean;
/**
 * Additional css classes attached to the box
 */
export declare type Class11 = string;
/**
 * Select the headline level to use, or p alternatively
 */
export declare type Level4 = "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Select the headline style to use
 */
export declare type Style4 = "none" | "h1" | "h2" | "h3" | "h4" | "h5" | "p";
/**
 * Choose an alignment for the headline
 */
export declare type Alignment5 = "left" | "center" | "right";
/**
 * Text content for the headline
 */
export declare type Text7 = string;
/**
 * Text content for the optional subheadline
 */
export declare type Subheadline4 = string;
/**
 * Add additional spacing to the bottom of the headline
 */
export declare type BottomSpacing4 = "none" | "small" | "large";
/**
 * Set the headline as a page header, triggering special css treatment
 */
export declare type PageHeader4 = boolean;
/**
 * Add additional css classes that should be applied to the headline
 */
export declare type AdditionalClasses20 = string;
/**
 * Add additional css classes that should be applied to the section
 */
export declare type AdditionalClass11 = string;
export interface SectionProps {
    width?: "full" | "max" | "wide" | "default" | "narrow";
    gutter?: "large" | "default" | "small" | "none";
    mode?: "default" | "tile" | "list";
    content?: (QuotesSlider | LinkButton | ToggleSwitch | Button | TagLabel | Visual | Quote1 | VisualSlider | Contact | Storytelling | CollapsibleBox | CountUp | ContentBox | Headline3 | TextMedia | TeaserBox | LogoTiles | TeaserRow)[];
    background?: "default" | "accent" | "dark";
    spaceBefore?: "default" | "small" | "none";
    spaceAfter?: "default" | "small" | "none";
    headline?: Headline4;
    className?: AdditionalClass11;
    pattern?: "none" | "1" | "2";
    deko?: boolean;
    [k: string]: unknown;
}
export interface QuotesSlider {
    slides?: Quote[];
    className?: Class1;
    [k: string]: unknown;
}
/**
 * Component to display a rich quote
 */
export interface Quote {
    image?: ImageSource;
    text: TextContent;
    source?: Source;
    byline?: SourceAddition;
    className?: Class;
    [k: string]: unknown;
}
/**
 * link-button
 */
export interface LinkButton {
    label: Label;
    variant: ButtonStyle;
    size: ButtonSize;
    className?: AdditionalClasses;
    icon?: Icon;
    iconBefore?: IconBeforeButton;
    iconAfter?: IconAfterButton;
    dataComponent?: DataComponentAttribute;
    fillAnimation?: FillAnimation;
    iconAnimation?: IconAnimation;
    href: ButtonHref;
    newTab?: OpenLinkInNewTab;
}
/**
 * Icon
 */
export interface Icon {
    icon?: IconIdentifier;
    role?: AriaRole;
    className?: AdditionalClass;
    [k: string]: unknown;
}
/**
 * Toggle Switch
 */
export interface ToggleSwitch {
    id: ID;
    name: Name;
    checked: Checked;
    disabled: Disabled;
    [k: string]: unknown;
}
/**
 * Component to display links and call-to-actions
 */
export interface Button {
    label: Label1;
    variant: ButtonStyle1;
    size: ButtonSize1;
    className?: AdditionalClasses1;
    icon?: Icon1;
    iconBefore?: IconBeforeButton1;
    iconAfter?: IconAfterButton1;
    dataComponent?: DataComponentAttribute1;
    fillAnimation?: FillAnimation1;
    iconAnimation?: IconAnimation1;
    type?: TypeAttribute;
    value?: ValueAttribute;
    name?: NameAttribute;
    disabled?: DisabledAttribute;
}
/**
 * Icon
 */
export interface Icon1 {
    icon?: IconIdentifier1;
    role?: AriaRole1;
    className?: AdditionalClass1;
    [k: string]: unknown;
}
/**
 * Component to render a pill / tag / label
 */
export interface TagLabel {
    label: Label2;
    size: Size;
    link?: LinkTarget;
    removable?: Removable;
    className?: AdditionalClasses2;
}
/**
 * visual
 */
export interface Visual {
    height?: Height;
    media?: MediaWrapper;
    overlay?: GridLayer;
    box?: TextBox;
    backgroundColor?: CustomBackgroundColor;
    inbox?: Inbox;
    skipButton?: SkipButton;
    className?: AdditionalClasses5;
}
/**
 * Wrapper for all media types
 */
export interface MediaWrapper {
    mode?: MediaType;
    image?: BackgroundImage;
    video?: BackgroundVideo;
}
/**
 * Sources of background images for different screen sizes
 */
export interface BackgroundImage {
    srcMobile: MobileImageSource;
    srcTablet: TabletImageSource;
    srcDesktop: DesktopImageSource;
    src?: OptionalSource;
    indent?: ImageIndent;
    alt?: AltText;
    [k: string]: unknown;
}
/**
 * Sources of background videos for different screen sizes
 */
export interface BackgroundVideo {
    srcMobile: MobileVideoSource;
    srcTablet: TabletVideoSource;
    srcDesktop: DesktopVideoSource;
    [k: string]: unknown;
}
/**
 * Content and style configuration for the text box
 */
export interface TextBox {
    enabled?: DisplayBox;
    headline?: Headline;
    text?: Text1;
    link?: Link;
    indent?: Indent;
    horizontal?: HorizontalOrientation;
    vertical?: VerticalOrientation;
    background?: StyleOfTheBox;
}
/**
 * Headline for the box
 */
export interface Headline {
    level: Level;
    styleAs?: Style;
    align: Alignment;
    content?: Text;
    subheadline?: Subheadline;
    spaceAfter: BottomSpacing;
    pageHeader?: PageHeader;
    className?: AdditionalClasses3;
    [k: string]: unknown;
}
/**
 * Text box link configuration
 */
export interface Link {
    enabled?: DisplayLink;
    variant: ButtonStyle2;
    label: Label3;
    size: ButtonSize2;
    className?: AdditionalClasses4;
    icon?: Icon2;
    iconBefore?: IconBeforeButton2;
    iconAfter?: IconAfterButton2;
    dataComponent?: DataComponentAttribute2;
    fillAnimation?: FillAnimation2;
    iconAnimation?: IconAnimation2;
    href: ButtonHref1;
    newTab?: OpenLinkInNewTab1;
}
/**
 * Icon
 */
export interface Icon2 {
    icon?: IconIdentifier2;
    role?: AriaRole2;
    className?: AdditionalClass2;
    [k: string]: unknown;
}
/**
 * Component to display a rich quote
 */
export interface Quote1 {
    image?: ImageSource1;
    text: TextContent1;
    source?: Source1;
    byline?: SourceAddition1;
    className?: Class2;
    [k: string]: unknown;
}
/**
 * Visual Slider
 */
export interface VisualSlider {
    autoplay?: AutoPlay;
    slides: Visual1[];
    className?: Class3;
    [k: string]: unknown;
}
/**
 * visual
 */
export interface Visual1 {
    height?: Height1;
    media?: MediaWrapper1;
    overlay?: GridLayer1;
    box?: TextBox1;
    backgroundColor?: CustomBackgroundColor1;
    inbox?: Inbox1;
    skipButton?: SkipButton1;
    className?: AdditionalClasses8;
    label?: SlidePreviewLabel;
}
/**
 * Wrapper for all media types
 */
export interface MediaWrapper1 {
    mode?: MediaType1;
    image?: BackgroundImage1;
    video?: BackgroundVideo1;
}
/**
 * Sources of background images for different screen sizes
 */
export interface BackgroundImage1 {
    srcMobile: MobileImageSource1;
    srcTablet: TabletImageSource1;
    srcDesktop: DesktopImageSource1;
    src?: OptionalSource1;
    indent?: ImageIndent1;
    alt?: AltText1;
    [k: string]: unknown;
}
/**
 * Sources of background videos for different screen sizes
 */
export interface BackgroundVideo1 {
    srcMobile: MobileVideoSource1;
    srcTablet: TabletVideoSource1;
    srcDesktop: DesktopVideoSource1;
    [k: string]: unknown;
}
/**
 * Content and style configuration for the text box
 */
export interface TextBox1 {
    enabled?: DisplayBox1;
    headline?: Headline1;
    text?: Text3;
    link?: Link1;
    indent?: Indent1;
    horizontal?: HorizontalOrientation1;
    vertical?: VerticalOrientation1;
    background?: StyleOfTheBox1;
}
/**
 * Headline for the box
 */
export interface Headline1 {
    level: Level1;
    styleAs?: Style1;
    align: Alignment1;
    content?: Text2;
    subheadline?: Subheadline1;
    spaceAfter: BottomSpacing1;
    pageHeader?: PageHeader1;
    className?: AdditionalClasses6;
    [k: string]: unknown;
}
/**
 * Text box link configuration
 */
export interface Link1 {
    enabled?: DisplayLink1;
    variant: ButtonStyle3;
    label: Label4;
    size: ButtonSize3;
    className?: AdditionalClasses7;
    icon?: Icon3;
    iconBefore?: IconBeforeButton3;
    iconAfter?: IconAfterButton3;
    dataComponent?: DataComponentAttribute3;
    fillAnimation?: FillAnimation3;
    iconAnimation?: IconAnimation3;
    href: ButtonHref2;
    newTab?: OpenLinkInNewTab2;
}
/**
 * Icon
 */
export interface Icon3 {
    icon?: IconIdentifier3;
    role?: AriaRole3;
    className?: AdditionalClass3;
    [k: string]: unknown;
}
/**
 * Component to show contact information
 */
export interface Contact {
    image?: Picture;
    title?: Title;
    subtitle?: Subtitle;
    phone?: PhoneNumber;
    email?: EmailAddress;
    copy?: CopyText;
    className?: Class4;
    [k: string]: unknown;
}
/**
 * Base component to display a picture
 */
export interface Picture {
    src?: Source2;
    srcSet?: PictureSourceset;
    alt?: AltText2;
    width?: Width;
    height?: Height2;
    className?: AdditionalClasses9;
    id?: Id;
    itemProp?: ItempropAttribute;
    style?: StyleAttribute;
    objectFit?: ObjectFit;
    noscript?: Noscript;
    lazy?: Lazy;
    sources?: Sources;
    pictureClassName?: ClassAttribute;
    [k: string]: unknown;
}
/**
 * Component to present rich combinations of text and media, best used sequentially
 */
export interface Storytelling {
    backgroundImage?: BackgroundImage2;
    backgroundColor?: BackgroundColor;
    full?: FullSizeImage;
    image: Image;
    box: TextBox2;
    className?: Class5;
    [k: string]: unknown;
}
/**
 * Image displayed alongside the text content
 */
export interface Image {
    source?: ImageSource2;
    ratio?: ImageAspectRatio;
    vAlign?: ImageVerticalAlignment;
    hAlign?: ImageHorizontalAlignment;
    order?: Order;
    [k: string]: unknown;
}
/**
 * Choose what comes first on mobile and desktop: image or text
 */
export interface Order {
    mobileImageLast?: MobileImageAfterText;
    desktopImageLast?: DesktopImageAfterText;
    [k: string]: unknown;
}
/**
 * Text content to display
 */
export interface TextBox2 {
    headline?: Headline2;
    text?: Text5;
    textAlign?: TextAlignment;
    textColor?: TextColor;
    vAlign?: BoxVerticalAlignment;
    hAlign?: BoxHorizontalAlignment;
    link?: LinkButton1;
    [k: string]: unknown;
}
/**
 * Headline for the box
 */
export interface Headline2 {
    level: Level2;
    styleAs?: Style2;
    align: Alignment2;
    content?: Text4;
    subheadline?: Subheadline2;
    spaceAfter: BottomSpacing2;
    pageHeader?: PageHeader2;
    className?: AdditionalClasses10;
    [k: string]: unknown;
}
/**
 * link-button
 */
export interface LinkButton1 {
    label: Label5;
    variant: ButtonStyle4;
    size: ButtonSize4;
    className?: AdditionalClasses11;
    icon?: Icon4;
    iconBefore?: IconBeforeButton4;
    iconAfter?: IconAfterButton4;
    dataComponent?: DataComponentAttribute4;
    fillAnimation?: FillAnimation4;
    iconAnimation?: IconAnimation4;
    href: ButtonHref3;
    newTab?: OpenLinkInNewTab3;
}
/**
 * Icon
 */
export interface Icon4 {
    icon?: IconIdentifier4;
    role?: AriaRole4;
    className?: AdditionalClass4;
    [k: string]: unknown;
}
/**
 * Component to conditionally show additional info
 */
export interface CollapsibleBox {
    summary: SummaryTextForTheCollapsible;
    text: ContentOfTheCollapsible;
    className?: Class6;
}
/**
 * Component to to increase a number up to a final value
 */
export interface CountUp {
    to: Number;
    icon?: Icon5;
    topic?: Topic;
    text?: TextContent2;
    link?: Link2;
    className?: Class7;
    /**
     * See https://github.com/aFarkas/lazysizes/blob/gh-pages/README.md#data-expand-attribute
     */
    expand?: number;
    [k: string]: unknown;
}
/**
 * Icon
 */
export interface Icon5 {
    icon?: IconIdentifier5;
    role?: AriaRole5;
    className?: AdditionalClass5;
    [k: string]: unknown;
}
/**
 * link-button
 */
export interface Link2 {
    enabled?: DisplayLink2;
    label: Label6;
    variant: ButtonStyle5;
    size: ButtonSize5;
    className?: AdditionalClasses12;
    icon?: Icon6;
    iconBefore?: IconBeforeButton5;
    iconAfter?: IconAfterButton5;
    dataComponent?: DataComponentAttribute5;
    fillAnimation?: FillAnimation5;
    iconAnimation?: IconAnimation5;
    href: ButtonHref4;
    newTab?: OpenLinkInNewTab4;
}
/**
 * Icon
 */
export interface Icon6 {
    icon?: IconIdentifier6;
    role?: AriaRole6;
    className?: AdditionalClass6;
    [k: string]: unknown;
}
/**
 * Component to display content in a condensed, boxed form
 */
export interface ContentBox {
    ratio: ImageRatio;
    alignement: Alignment3;
    image?: ImageSource3;
    topic?: Topic1;
    text?: TextContent3;
    link?: Link3;
    className?: AdditionalClasses14;
}
/**
 * Content box link configuration
 */
export interface Link3 {
    enabled?: DisplayLink3;
    label: Label7;
    variant: ButtonStyle6;
    size: ButtonSize6;
    className?: AdditionalClasses13;
    icon?: Icon7;
    iconBefore?: IconBeforeButton6;
    iconAfter?: IconAfterButton6;
    dataComponent?: DataComponentAttribute6;
    fillAnimation?: FillAnimation6;
    iconAnimation?: IconAnimation6;
    href: ButtonHref5;
    newTab?: OpenLinkInNewTab5;
}
/**
 * Icon
 */
export interface Icon7 {
    icon?: IconIdentifier7;
    role?: AriaRole7;
    className?: AdditionalClass7;
    [k: string]: unknown;
}
/**
 * Headline
 */
export interface Headline3 {
    level: Level3;
    styleAs?: Style3;
    align: Alignment4;
    content?: Text6;
    subheadline?: Subheadline3;
    spaceAfter: BottomSpacing3;
    pageHeader?: PageHeader3;
    className?: AdditionalClasses15;
    [k: string]: unknown;
}
/**
 * Component to display copy text, including media
 */
export interface TextMedia {
    text: TextContent4;
    mediaAlignment: MediaAlignment;
    media?: Media;
    className?: Class8;
}
export interface TextMediaVideo {
    video?: Video;
    full?: FullWidthMedia;
    caption?: Caption;
    [k: string]: unknown;
}
/**
 * Video item to display
 */
export interface Video {
    src: Source3;
    iframe?: EmbeddedIframe;
    title?: VideoTitle;
    width: Width1;
    height: Height3;
    [k: string]: unknown;
}
export interface TextMediaImage {
    image?: Picture1;
    full?: FullWidthMedia1;
    caption?: Caption1;
    [k: string]: unknown;
}
/**
 * Base component to display a picture
 */
export interface Picture1 {
    src?: Source4;
    srcSet?: PictureSourceset2;
    alt?: AltText3;
    width?: Width2;
    height?: Height4;
    className?: AdditionalClasses16;
    id?: Id1;
    itemProp?: ItempropAttribute1;
    style?: StyleAttribute1;
    objectFit?: ObjectFit1;
    noscript?: Noscript1;
    lazy?: Lazy1;
    sources?: Sources1;
    pictureClassName?: ClassAttribute1;
    [k: string]: unknown;
}
export interface TextMediaLazyImage {
    lightboxImage?: LazyLightboxImage;
    full?: FullWidthMedia2;
    caption?: Caption3;
    [k: string]: unknown;
}
/**
 * Lazy Lightbox Image
 */
export interface LazyLightboxImage {
    thumb?: ThumbnailSource;
    image?: LightboxImageSource;
    width?: Width3;
    height?: Height5;
    zoomIcon?: HoverZoomIcon;
    caption?: Caption2;
    hideCaption?: HideCaptionVisually;
    gallery?: GalleryIdentifier;
    id?: ID1;
    className?: AdditionalClass8;
    captionClassName?: AdditionalCaptionClass;
    [k: string]: unknown;
}
/**
 * Component to tease external content
 */
export interface TeaserBox {
    topic?: Topic2;
    text?: TextContent5;
    darkStyle?: DarkVariant;
    link?: LinkButton2;
    className?: Class9;
    image?: ImageSource4;
    ratio: ImageRatio1;
    imageSpacing?: ImageSpacing;
}
/**
 * link-button
 */
export interface LinkButton2 {
    label: Label8;
    variant: ButtonStyle7;
    size: ButtonSize7;
    className?: AdditionalClasses17;
    icon?: Icon8;
    iconBefore?: IconBeforeButton7;
    iconAfter?: IconAfterButton7;
    dataComponent?: DataComponentAttribute7;
    fillAnimation?: FillAnimation7;
    iconAnimation?: IconAnimation7;
    href: ButtonHref6;
    newTab?: OpenLinkInNewTab6;
    hidden?: HideLink;
}
/**
 * Icon
 */
export interface Icon8 {
    icon?: IconIdentifier8;
    role?: AriaRole8;
    className?: AdditionalClass9;
    [k: string]: unknown;
}
/**
 * Component to list logos or seals
 */
export interface LogoTiles {
    logos?: Logos;
    className?: Class10;
    [k: string]: unknown;
}
/**
 * Base component to display a picture
 */
export interface Picture2 {
    src?: Source5;
    srcSet?: PictureSourceset4;
    alt?: AltText4;
    width?: Width4;
    height?: Height6;
    className?: AdditionalClasses18;
    id?: Id2;
    itemProp?: ItempropAttribute2;
    style?: StyleAttribute2;
    objectFit?: ObjectFit2;
    noscript?: Noscript2;
    lazy?: Lazy2;
    sources?: Sources2;
    pictureClassName?: ClassAttribute2;
    [k: string]: unknown;
}
/**
 * Component to tease external content
 */
export interface TeaserRow {
    topic?: Topic3;
    text?: TextContent6;
    darkStyle?: DarkVariant1;
    link?: LinkButton3;
    className?: Class11;
}
/**
 * link-button
 */
export interface LinkButton3 {
    label: Label9;
    variant: ButtonStyle8;
    size: ButtonSize8;
    className?: AdditionalClasses19;
    icon?: Icon9;
    iconBefore?: IconBeforeButton8;
    iconAfter?: IconAfterButton8;
    dataComponent?: DataComponentAttribute8;
    fillAnimation?: FillAnimation8;
    iconAnimation?: IconAnimation8;
    href: ButtonHref7;
    newTab?: OpenLinkInNewTab7;
    hidden?: HideLink1;
}
/**
 * Icon
 */
export interface Icon9 {
    icon?: IconIdentifier9;
    role?: AriaRole9;
    className?: AdditionalClass10;
    [k: string]: unknown;
}
/**
 * Headline
 */
export interface Headline4 {
    level: Level4;
    styleAs?: Style4;
    align: Alignment5;
    content?: Text7;
    subheadline?: Subheadline4;
    spaceAfter: BottomSpacing4;
    pageHeader?: PageHeader4;
    className?: AdditionalClasses20;
    [k: string]: unknown;
}
